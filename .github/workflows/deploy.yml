name: Deploy to EC2 (Direct SCP)
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Prepare deployment files
        run: |
          # Remove files we don't want to deploy
          rm -rf .git __pycache__ *.pyc .pytest_cache
          find . -name "*.log" -delete
          find . -name ".DS_Store" -delete
          
          # List what we're deploying
          echo "Files to be deployed:"
          find . -type f | head -20

      - name: Deploy to EC2
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
          # Create app directory on EC2
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ~/app_new"
          
          # Upload files directly using rsync over SSH
          echo "Uploading files to EC2..."
          rsync -avz -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
                --exclude='.git' \
                --exclude='__pycache__' \
                --exclude='*.pyc' \
                --exclude='.pytest_cache' \
                --exclude='*.log' \
                --exclude='.DS_Store' \
                ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app_new/
          
          # Deploy on EC2
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -T ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          
          echo "=== Starting Deployment ==="
          
          # Variables
          APP_DIR=~/app
          SERVICE_NAME=myapp
          VENV_DIR=$APP_DIR/venv
          
          # Backup current app if it exists
          if [ -d "$APP_DIR" ]; then
            echo "Backing up current application..."
            mv $APP_DIR ${APP_DIR}_backup_$(date +%Y%m%d_%H%M%S) || true
          fi
          
          # Move new version to app directory
          mv ~/app_new $APP_DIR
          cd $APP_DIR
          
          # Update system packages
          echo "Updating system..."
          sudo apt update -y
          sudo apt install -y python3-venv python3-pip nginx rsync
          
          # Setup Python environment
          echo "Setting up Python environment..."
          if [ ! -d "$VENV_DIR" ]; then
            python3 -m venv $VENV_DIR
          fi
          source $VENV_DIR/bin/activate
          pip install --upgrade pip
          
          # Check if we have Flask app structure or static site
          if [ -f app.py ] && [ -f requirements.txt ]; then
            echo "Found Flask app structure - Setting up Flask application..."
            
            # Install dependencies from requirements.txt
            echo "Installing dependencies from requirements.txt..."
            pip install -r requirements.txt
            
            SERVICE_NEEDED=true
            
            # Configure Nginx as reverse proxy for Flask
            echo "Configuring Nginx for Flask app..."
            sudo tee /etc/nginx/sites-available/myapp > /dev/null << 'NGINXEOF'
          server {
              listen 80;
              server_name _;
              
              location / {
                  proxy_pass http://127.0.0.1:8080;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              location /health {
                  proxy_pass http://127.0.0.1:8080/health;
                  access_log off;
              }
              
              # Handle static files (CSS, JS, images)
              location /static/ {
                  proxy_pass http://127.0.0.1:8080/static/;
              }
          }
          NGINXEOF
            
          else
            echo "No Flask structure found - Setting up as static site..."
            
            # Copy static files to nginx directory
            sudo mkdir -p /var/www/myapp
            sudo cp -r * /var/www/myapp/
            sudo chown -R www-data:www-data /var/www/myapp
            sudo chmod -R 755 /var/www/myapp
            
            # Configure Nginx for static files
            echo "Configuring Nginx for static site..."
            sudo tee /etc/nginx/sites-available/myapp > /dev/null << 'NGINXEOF'
          server {
              listen 80;
              server_name _;
              root /var/www/myapp;
              index index.html;
              
              location / {
                  try_files $uri $uri/ =404;
              }
              
              # Caching for static assets
              location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
          }
          NGINXEOF
            
            SERVICE_NEEDED=false
          fi
          
          # Create systemd service only if Flask app is needed
          if [ "$SERVICE_NEEDED" = true ]; then
            echo "Creating systemd service for Flask app..."
            sudo tee /etc/systemd/system/$SERVICE_NAME.service > /dev/null << 'SERVICEEOF'
          [Unit]
          Description=Chiedozie Flask CI/CD App
          After=network.target
          
          [Service]
          User=ubuntu
          Group=ubuntu
          WorkingDirectory=/home/ubuntu/app
          Environment="PATH=/home/ubuntu/app/venv/bin"
          ExecStart=/home/ubuntu/app/venv/bin/gunicorn -w 4 -b 0.0.0.0:8080 app:app
          Restart=always
          RestartSec=3
          
          [Install]
          WantedBy=multi-user.target
          SERVICEEOF
          else
            echo "Using static site - no systemd service needed"
          fi
          
          # Enable Nginx site
          sudo ln -sf /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t && sudo systemctl restart nginx
          
          # Start the application service only if needed
          if [ "$SERVICE_NEEDED" = true ]; then
            echo "Starting Flask application service..."
            sudo systemctl daemon-reload
            sudo systemctl enable $SERVICE_NAME
            sudo systemctl restart $SERVICE_NAME
            
            # Wait a moment and check status
            sleep 3
            echo "=== Service Status ==="
            sudo systemctl status $SERVICE_NAME --no-pager -l
            
            echo "=== Application Health Check ==="
            curl -f http://localhost:8080/health || echo "Health check failed"
          else
            echo "Static site deployed - no service to start"
          fi
          
          echo "=== Nginx Status ==="
          sudo systemctl status nginx --no-pager
          
          echo "=== Deployment Complete ==="
          if [ -f app.py ]; then
            echo "Your Flask application is now live!"
          else
            echo "Your static site is now live!"
          fi
          echo "Application should be accessible at: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
          EOF