name: Deploy to EC2
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test SSH Connection
        run: |
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Create private key file
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Test the key format
          echo "Testing SSH key format..."
          file ~/.ssh/deploy_key
          head -1 ~/.ssh/deploy_key
          tail -1 ~/.ssh/deploy_key
          
          # Add host to known_hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          
          # Test connection
          echo "Testing SSH connection..."
          ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'Connection successful'; whoami; pwd"

      - name: Deploy Application
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -T ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          
          echo "=== Starting Deployment ==="
          
          # Variables
          APP_DIR=~/app
          SERVICE_NAME=myapp
          REPO_URL=https://github.com/Doziechucks/CI-CD-pipeline.git
          VENV_DIR=$APP_DIR/venv
          
          # Create app directory
          echo "Creating app directory..."
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Update system
          echo "Updating system..."
          sudo apt update -y
          sudo apt install -y python3-venv python3-pip git nginx
          
          # Clone/update repository
          echo "Getting latest code..."
          if [ -d .git ]; then
            git pull origin main || echo "Git pull failed, trying reset..."
            git fetch origin
            git reset --hard origin/main
          else
            git clone $REPO_URL .
          fi
          
          # Setup Python environment
          echo "Setting up Python environment..."
          python3 -m venv $VENV_DIR
          source $VENV_DIR/bin/activate
          pip install --upgrade pip
          
          # Install dependencies
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install flask gunicorn
          fi
          
          # Create simple Flask app if it doesn't exist
          if [ ! -f app.py ]; then
            cat > app.py << 'PYEOF'
          from flask import Flask
          app = Flask(__name__)
          
          @app.route('/')
          def hello():
              return '<h1>Chiedozie CI/CD Pipeline Test</h1><p>Deployment successful!</p>'
          
          if __name__ == '__main__':
              app.run(host='0.0.0.0', port=8080)
          PYEOF
          fi
          
          # Create systemd service
          echo "Creating systemd service..."
          sudo tee /etc/systemd/system/$SERVICE_NAME.service > /dev/null << 'SERVICEEOF'
          [Unit]
          Description=Flask App
          After=network.target
          
          [Service]
          User=ubuntu
          WorkingDirectory=/home/ubuntu/app
          Environment="PATH=/home/ubuntu/app/venv/bin"
          ExecStart=/home/ubuntu/app/venv/bin/gunicorn -w 4 -b 0.0.0.0:8080 app:app
          Restart=always
          RestartSec=3
          
          [Install]
          WantedBy=multi-user.target
          SERVICEEOF
          
          # Reload and restart service
          sudo systemctl daemon-reload
          sudo systemctl enable $SERVICE_NAME
          sudo systemctl restart $SERVICE_NAME
          
          # Check service status
          echo "Service status:"
          sudo systemctl status $SERVICE_NAME --no-pager
          
          echo "=== Deployment Complete ==="
          EOF